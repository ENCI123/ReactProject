[{"C:\\Users\\linti\\OneDrive\\Desktop\\SWEN-344\\react-final-exl7069\\src\\index.js":"1","C:\\Users\\linti\\OneDrive\\Desktop\\SWEN-344\\react-final-exl7069\\src\\App.js":"2","C:\\Users\\linti\\OneDrive\\Desktop\\SWEN-344\\react-final-exl7069\\src\\reportWebVitals.js":"3","C:\\Users\\linti\\OneDrive\\Desktop\\SWEN-344\\react-final-exl7069\\src\\mycomponent.js":"4","C:\\Users\\linti\\OneDrive\\Desktop\\SWEN-344\\react-final-exl7069\\src\\MyTable.js":"5"},{"size":531,"mtime":1607049152534,"results":"6","hashOfConfig":"7"},{"size":528,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":3500,"mtime":1607021314434,"results":"10","hashOfConfig":"7"},{"size":8608,"mtime":1607056433440,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"52fktr",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\linti\\OneDrive\\Desktop\\SWEN-344\\react-final-exl7069\\src\\index.js",[],["25","26"],"C:\\Users\\linti\\OneDrive\\Desktop\\SWEN-344\\react-final-exl7069\\src\\App.js",[],"C:\\Users\\linti\\OneDrive\\Desktop\\SWEN-344\\react-final-exl7069\\src\\reportWebVitals.js",[],"C:\\Users\\linti\\OneDrive\\Desktop\\SWEN-344\\react-final-exl7069\\src\\mycomponent.js",["27"],"import React, { Component } from 'react';\r\nimport {Button, Input, Label, Modal, ModalBody, ModalFooter} from 'reactstrap';\r\n\r\nclass MyComponent extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={data: \"\",\r\n                firstName: \"\", //For capturing user input\r\n                lastName: \"\", //For capturing user input\r\n                showModal: false,\r\n                testMessage: \"\"}\r\n    }\r\n\r\n    updateData = (apiResponse) => {\r\n        this.setState({data: apiResponse})\r\n    }\r\n\r\n    fetchMessage = () => {\r\n        //In package.json add \"proxy\": \"http://localhost:5000\" \r\n        //This will allow redirect to REST api in Flask w/o CORS errors\r\n         fetch('/test_message')\r\n         .then(\r\n             response => response.json() \r\n             )//The promise response is returned, then we extract the json data\r\n         .then (jsonOutput => //jsonOutput now has result of the data extraction\r\n                  {\r\n                      this.setState({testMessage: jsonOutput})\r\n                    }\r\n              )\r\n      }\r\n\r\n    fetchData = () => {\r\n        //In package.json add \"proxy\": \"http://localhost:5000\" \r\n        //This will allow redirect to REST api in Flask w/o CORS errors\r\n         fetch('/example_api')\r\n         .then(\r\n             response => response.json() \r\n             )//The promise response is returned, then we extract the json data\r\n         .then (jsonOutput => //jsonOutput now has result of the data extraction\r\n                  {\r\n                      this.updateData(jsonOutput)\r\n                    }\r\n              )\r\n      }\r\n    componentDidMount(){\r\n        this.fetchData();\r\n    }\r\n\r\n    updateFirstName = (e) =>\r\n     { this.setState({firstName: e.target.value}) //Update the text data in state\r\n    }\r\n    updateLastName = (e) => \r\n    { this.setState({lastName: e.target.value}) //Update the text data in state\r\n    }\r\n\r\n    handleSubmit = ()=> {\r\n            let msg = \r\n            'Your name is ' + this.state.firstName + ' ' + this.state.lastName; //Use the updated state variables to capture the user input\r\n            this.setState({showModal: true,\r\n                    summary: msg})\r\n    }\r\n    render(){\r\n        {/*If the data has not yet been loaded from the server, return empty page */}\r\n        if ( this.state.data == null )\r\n        return (<div>No data</div>)\r\n        else\r\n        {\r\n        return (\r\n            <div className='m-4'>\r\n                <div><h2>The api response is: {this.state.data}</h2>\r\n                <Label for=\"fName\">First Name</Label>\r\n                <Input id=\"fName\" type='text' placeholder=\"Enter firstname\" onChange={this.updateFirstName}></Input>\r\n                <Label for=\"lName\">Last Name</Label>\r\n                <Input id=\"lName\" type='text' placeholder='Enter lastname' onChange={this.updateLastName}></Input>\r\n                <Button normal onClick={this.handleSubmit}>Submit</Button>\r\n               \r\n                <Modal isOpen={this.state.showModal} onOpened={this.fetchMessage}>\r\n                    <ModalBody>{this.state.summary}\r\n                    <p>The message was: { this.state.testMessage}</p></ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\" onClick={()=>this.setState({showModal:false})}>Ok</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n                </div>\r\n            </div>\r\n        )\r\n        }\r\n    }\r\n}\r\n\r\nexport default MyComponent;",["28","29"],"C:\\Users\\linti\\OneDrive\\Desktop\\SWEN-344\\react-final-exl7069\\src\\MyTable.js",["30"],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":63,"column":9,"nodeType":"37","messageId":"38","endLine":63,"endColumn":86},{"ruleId":"31","replacedBy":"39"},{"ruleId":"33","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":3,"column":51,"nodeType":"43","messageId":"44","endLine":3,"endColumn":59},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["45"],["46"],"no-unused-vars","'Dropdown' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]